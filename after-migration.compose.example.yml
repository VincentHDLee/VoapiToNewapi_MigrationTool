# -----------------------------------------------------------------
# 示例文件: 迁移后的 docker-compose.yml
#
# 这是在数据迁移成功后，用于服务切换的示例。
# 关键点:
# 1. 注释掉了旧的 'voapi' 服务。
# 2. 添加了新的 'new-api' 服务。
# 3. 'new-api' 服务被配置为使用现有的 'mysql' 和 'redis'。
# 4. 'nginx' 服务的 'depends_on' 已更新为 'new-api'。
# -----------------------------------------------------------------

services:
  # --- 步骤 1: 注释或删除旧的 VoAPI 服务 ---
  # voapi:
  #   image: voapi/voapi:latest
  #   container_name: voapi-app
  #   ... (此处省略了 voapi 的所有配置)

  # --- 步骤 2: 添加新的 NewAPI 服务 ---
  new-api:
    image: calciumion/new-api:latest # 使用 NewAPI 的官方镜像
    container_name: new-api-app      # 新的服务名
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000" # 保持与旧 voapi 相同的端口，以便 nginx 无缝对接
    volumes:
      - ./new-api-data:/data # 为 new-api 创建一个新的数据目录 (如果需要)
    environment:
      # !! 关键：连接到您现有的 MySQL 和 Redis 服务 !!
      - SQL_DSN=voapi_user:YOUR_VOAPI_USER_PASSWORD@tcp(mysql:3306)/voapi?charset=utf8mb4&parseTime=True&loc=Local
      - REDIS_CONN_STRING=redis://:YOUR_REDIS_PASSWORD@redis:6379
      - SESSION_SECRET=A_NEW_AND_SECURE_SESSION_SECRET
      - TZ=Asia/Tokyo
      - GIN_MODE=release
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - voapi-net

  mysql:
    image: mysql:8.0
    container_name: voapi-mysql
    restart: unless-stopped
    ports:
      - "33066:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=YOUR_MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE=voapi
      - MYSQL_USER=voapi_user
      - MYSQL_PASSWORD=YOUR_VOAPI_USER_PASSWORD
      - TZ=Asia/Tokyo
    command: [--character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci]
    networks:
      - voapi-net

  mysql-backup:
    image: tiredofit/db-backup
    container_name: voapi-mysql-backup
    # ... (保持不变)
    environment:
      - DB_TYPE=mysql
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASS=YOUR_MYSQL_ROOT_PASSWORD
      - DB_NAME=voapi
      - BACKUP_TIME=03:00
      - CLEANUP_TIME=168
      - TIMEZONE=Asia/Tokyo
      - COMPRESSION=gzip
    volumes:
      - ./backups:/backup
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - voapi-net


  redis:
    image: redis:7-alpine
    container_name: voapi-redis
    # ... (保持不变)
    restart: unless-stopped
    volumes:
      - redis_data:/data
    environment:
      - TZ=Asia/Tokyo
    command:
      - redis-server
      - --requirepass
      - YOUR_REDIS_PASSWORD
      - --maxmemory
      - 512mb
      - --maxmemory-policy
      - allkeys-lru
    networks:
      - voapi-net

  nginx:
    image: nginx:latest
    container_name: voapi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
      - ./static/images:/var/www/sucoiapi.com/static/images:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    environment:
      - TZ=Asia/Tokyo
    # --- !! 关键修改 !! ---
    # 将依赖从 voapi 更新为 new-api
    depends_on:
      - new-api
    networks:
      - voapi-net

  watchtower:
    image: containrrr/watchtower
    container_name: voapi-watchtower
    # ... (保持不变)
    restart: unless-stopped
    environment:
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - TZ=Asia/Tokyo
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: ["--cleanup", "--debug", "voapi-app", "new-api-app"] # 可选：同时监控新旧服务
    networks:
      - voapi-net

volumes:
  mysql_data:
  redis_data:
  new-api-data: # 为 new-api 添加新的数据卷

networks:
  voapi-net:
    driver: bridge