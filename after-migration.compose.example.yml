# -----------------------------------------------------------------
# 示例文件: 迁移后的 docker-compose.yml (最终完美版)
#
# 这是迁移成功后，用于服务切换的最终状态。无任何省略。
# 关键变化:
# 1. `voapi` 服务被注释掉。
# 2. `new-api` 服务被激活。
# 3. 所有子服务 (redis, backup, nginx 等) 都被更新以适配 NewAPI 生态。
# -----------------------------------------------------------------
services:
  # --- VoAPI 服务 (已停用) ---
  # voapi:
  #   image: voapi/voapi:latest
  #   container_name: voapi-app
  #   restart: unless-stopped
  #   ... (内容省略)

  # --- VoAPI 数据库 (数据已迁移，服务保留作为备份) ---
  mysql:
    image: mysql:8.0
    container_name: voapi-mysql-backup-instance
    restart: unless-stopped
    ports:
      - "33066:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=YOUR_MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE=voapi
      - MYSQL_USER=voapi_user
      - MYSQL_PASSWORD=YOUR_VOAPI_USER_PASSWORD
    networks:
      - voapi-net

  # --- NewAPI 服务 (已激活) ---
  new-api:
    image: calciumion/new-api:latest
    container_name: new-api-app
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - new_api_data:/data
    environment:
      - SQL_DSN=newapi_user:YOUR_NEWAPI_USER_PASSWORD@tcp(mysql-newapi:3306)/newapi?charset=utf8mb4&parseTime=True&loc=Local
      - REDIS_CONN_STRING=redis://:YOUR_REDIS_PASSWORD@redis-newapi:6379
      - SESSION_SECRET=A_NEW_AND_SECURE_SESSION_SECRET
      - TZ=Asia/Tokyo
      - GIN_MODE=release
    depends_on:
      mysql-newapi:
        condition: service_healthy
      redis-newapi:
        condition: service_healthy
    networks:
      - voapi-net
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --tries=1 --timeout=10 http://localhost:3000/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  
  # --- NewAPI 数据库 (已激活) ---
  mysql-newapi:
    image: mysql:8.0
    container_name: newapi-mysql
    restart: unless-stopped
    volumes:
      - newapi_mysql_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=YOUR_NEWAPI_MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE=newapi
      - MYSQL_USER=newapi_user
      - MYSQL_PASSWORD=YOUR_NEWAPI_USER_PASSWORD
      - TZ=Asia/Tokyo
    command: [--character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci]
    networks:
      - voapi-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pYOUR_NEWAPI_MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # --- NewAPI 数据库备份 (已适配) ---
  mysql-backup:
    image: tiredofit/db-backup
    container_name: newapi-mysql-backup
    restart: unless-stopped
    environment:
      - DB_TYPE=mysql
      - DB_HOST=mysql-newapi # <-- 已更新
      - DB_USER=root
      - DB_PASS=YOUR_NEWAPI_MYSQL_ROOT_PASSWORD # <-- 已更新
      - DB_NAME=newapi # <-- 已更新
      - BACKUP_TIME=03:00
      - CLEANUP_TIME=168
      - TIMEZONE=Asia/Tokyo
      - COMPRESSION=gzip
    volumes:
      - ./backups:/backup
    depends_on:
      mysql-newapi: # <-- 已更新
        condition: service_healthy
    networks:
      - voapi-net

  # --- NewAPI Redis (已适配) ---
  redis-newapi:
    image: redis:7-alpine
    container_name: newapi-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    environment:
      - TZ=Asia/Tokyo
    command:
      - redis-server
      - --requirepass
      - YOUR_REDIS_PASSWORD
      - --maxmemory
      - 512mb
      - --maxmemory-policy
      - allkeys-lru
    networks:
      - voapi-net
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "YOUR_REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- NewAPI Redis 清理 (已适配) ---
  redis-cleanup:
    image: redis:7-alpine
    container_name: newapi-redis-cleanup
    restart: unless-stopped
    environment:
      - TZ=Asia/Tokyo
    command: |
      sh -c '
        while true; do
          echo "Running Redis cleanup job for new-api at $$(date)"
          KEYS_TO_CHECK=$$(redis-cli -h redis-newapi -a YOUR_REDIS_PASSWORD --scan --pattern "*" | xargs) # <-- 已更新
          if [ -n "$$KEYS_TO_CHECK" ]; then
            for key in $$KEYS_TO_CHECK; do
              TTL=$$(redis-cli -h redis-newapi -a YOUR_REDIS_PASSWORD TTL "$$key") # <-- 已更新
              if [ "$$TTL" -le 0 ] && [ "$$TTL" -ne -2 ]; then
                echo "Deleting key '\''$$key'\'' with TTL $$TTL"
                redis-cli -h redis-newapi -a YOUR_REDIS_PASSWORD DEL "$$key" # <-- 已更新
              fi
            done
          else
            echo "No keys found to check via SCAN."
          fi
          sleep 86400
        done
      '
    depends_on:
      redis-newapi: # <-- 已更新
        condition: service_healthy
    networks:
      - voapi-net

  # --- Nginx (已适配) ---
  nginx:
    image: nginx:latest
    container_name: newapi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
      - ./static/images:/var/www/sucoiapi.com/static/images:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - new-api # <-- 已更新
    networks:
      - voapi-net
    healthcheck:
      test: ["CMD-SHELL", "nginx -t && curl --fail --silent --insecure https://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # --- Watchtower (已适配) ---
  watchtower:
    image: containrrr/watchtower
    container_name: newapi-watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - TZ=Asia/Tokyo
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: ["--cleanup", "--debug", "new-api-app"] # <-- 已更新
    networks:
      - voapi-net

volumes:
  mysql_data: # voapi 旧数据卷，保留
  redis_data:
  newapi_mysql_data:
  new_api_data:

networks:
  voapi-net:
    driver: bridge